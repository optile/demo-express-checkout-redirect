import _regeneratorRuntime from "babel-runtime/regenerator";

var _this = this;

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

import { useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { getExpressPresetAccount, onClientException } from "../../utils/customFunctions";
import { handleError } from "../../utils";
import { setPresetAccountLoading, setPresetAccountError, storePresetAccount } from "./redux";
import { removeGlobalError } from "../GlobalError/redux";

var getPresetLink = function getPresetLink(baseURL, longId) {
    return baseURL.replace("/pci/v1/express", "/pci/v1/presets") + "/" + longId;
};

/**
 * On Error
 *
 * @param {Object} params
 * @param {Object} params.err
 * @param {Function} params.dispatch
 * @param {Object} params.customFunctions
 */
var onError = function onError(_ref) {
    var err = _ref.err,
        dispatch = _ref.dispatch,
        customFunctions = _ref.customFunctions;

    var step = "Get Preset Account";
    var network = "";
    var errorProps = {
        err: err,
        step: step,
        network: network,
        updateState: function updateState() {
            dispatch(setPresetAccountError(err));
            dispatch(setPresetAccountLoading(false));
        },
        dispatch: dispatch,
        customFunctions: customFunctions
    };
    handleError(errorProps);
};
/**
 * Handle Fetch Prest Account when response is ok
 *
 * @param {Object} params
 * @param {Object} params.result
 * @param {Object} params.dispatch
 * @param {Object} params.customFunctions
 */
var fetchPresetAccountOk = function fetchPresetAccountOk(_ref2) {
    var result = _ref2.result,
        dispatch = _ref2.dispatch;

    dispatch(storePresetAccount(result.data));
    dispatch(setPresetAccountLoading(false));
};
/**
 * Fetch Preset Account
 *
 * @param {Object} params
 * @param {Object} params.dispatch
 * @param {Object} params.customFunctions
 * @param {String} params.baseURL
 * @param {String} params.longId
 */
var fetchPresetAccount = function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref4) {
        var dispatch = _ref4.dispatch,
            customFunctions = _ref4.customFunctions,
            baseURL = _ref4.baseURL,
            longId = _ref4.longId;

        var url, result, err, _err;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        dispatch(setPresetAccountLoading(true));
                        _context.prev = 1;
                        url = getPresetLink(baseURL, longId);
                        _context.next = 5;
                        return getExpressPresetAccount({ params: { url: url } }, customFunctions);

                    case 5:
                        result = _context.sent;

                        if (result.response.ok) {
                            fetchPresetAccountOk({ result: result, dispatch: dispatch });
                        } else {
                            err = result.err;

                            onError({ err: err, dispatch: dispatch, customFunctions: customFunctions });
                        }
                        _context.next = 13;
                        break;

                    case 9:
                        _context.prev = 9;
                        _context.t0 = _context["catch"](1);
                        _err = { message: _context.t0.message };

                        onError({ err: _err, dispatch: dispatch, customFunctions: customFunctions });

                    case 13:
                    case "end":
                        return _context.stop();
                }
            }
        }, _callee, _this, [[1, 9]]);
    }));

    return function fetchPresetAccount(_x) {
        return _ref3.apply(this, arguments);
    };
}();
/**
 * Custom hook that run get Preset Account async and store the response
 * @param {Object} customFunctions
 */
var usePresetAccount = function usePresetAccount(customFunctions) {
    var dispatch = useDispatch();
    var baseURL = useSelector(function (state) {
        return state.configuration.baseURL;
    });
    var longId = useSelector(function (state) {
        return state.longId;
    });
    useEffect(function () {
        if (baseURL && longId) {
            fetchPresetAccount({ dispatch: dispatch, customFunctions: customFunctions, baseURL: baseURL, longId: longId });
        }
    }, [baseURL, longId]);
};
/**
 * Custom hook to display or hide global error depending of params
 * @param {Object} customFunctions
 */
var useCheckPropsForSummary = function useCheckPropsForSummary(customFunctions) {
    var dispatch = useDispatch();
    var mode = useSelector(function (state) {
        return state.mode;
    });
    var longId = useSelector(function (state) {
        return state.longId;
    });
    useEffect(function () {
        if (mode === "Summary" && !longId) {
            onClientException({ preset: { resultInfo: "No longId" }, step: "Init Summary", dispatch: dispatch, customFunctions: customFunctions });
        } else {
            removeGlobalError(dispatch);
        }
    }, [mode, longId]);
};

export { usePresetAccount, fetchPresetAccount, onError, useCheckPropsForSummary };