var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import React from "react";
import { useSelector } from "react-redux";
import { useList } from "./hook";
import Paypal from "../paymentMethods/Paypal";
import Amazon from "../paymentMethods/Amazon";
import map from "lodash/map";
/**
 * Load Payment Method By Code
 * @param {String} code
 * @param {Object} bindingProps
 */
var loadPaymentMethodByCode = function loadPaymentMethodByCode(code, bindingProps, index) {
    switch (code) {
        case "PAYPAL":
            return React.createElement(Paypal, _extends({}, bindingProps, { key: "PAYPAL_" + index }));
        case "AMAZONPAY":
            return React.createElement(Amazon, _extends({}, bindingProps, { key: "AMAZONPAY_" + index }));
        default:
            return null;
    }
};

/**
 * Payments Container
 * render the list of payment methods depends on value from state
 * @param {Object} props
 * @return {JSX.Element}
 */
var PaymentsContainer = function PaymentsContainer(props) {
    var listOfPaymentMethods = useSelector(function (state) {
        return state.list.data;
    });
    useList(props.customFunctions);
    return React.createElement(
        "div",
        { "test-id": "payments-container" },
        listOfPaymentMethods && map(listOfPaymentMethods, function (method, i) {
            return loadPaymentMethodByCode(method.code, props, i);
        })
    );
};

PaymentsContainer.propTypes = process.env.NODE_ENV !== "production" ? {} : {};

export default PaymentsContainer;