import React, { useEffect /*, useState*/ } from "react";
import PropTypes from "prop-types";
import { storeConfiguration, storeMode, storeLongId } from "./redux";
import { useDispatch, useSelector } from "react-redux";
import PaymentsContainer from "../PaymentsContainer";
import PaymentsSummaryContainer from "../PaymentsSummaryContainer";
import GlobalError from "../GlobalError";

/**
 * Configuration Manager
 * The main component to render express checkout widget
 * @param {Object} props
 * @param {Object} props.configuration
 * @param {Function} props.createTransactionDetails
 * @param {Object} props.customFunctions
 * @param {String} props.mode
 * @param {String} props.longId
 * @return {JSX.Element}
 */
var ConfigurationManager = function ConfigurationManager(props) {
    var dispatch = useDispatch();
    var mode = useSelector(function (state) {
        return state.mode;
    });
    var globalError = useSelector(function (state) {
        return state.globalError;
    });
    var displayGlobalError = useSelector(function (state) {
        return state.displayGlobalError;
    });

    useEffect(function () {
        dispatch(storeConfiguration(props.configuration));
        dispatch(storeMode(props.mode));
        dispatch(storeLongId(props.longId));
    }, [props.longId, props.mode]);

    if (displayGlobalError) {
        return React.createElement(GlobalError, { message: globalError });
    }

    return mode === "Summary" ? React.createElement(PaymentsSummaryContainer, props) : React.createElement(PaymentsContainer, props);
};

ConfigurationManager.propTypes = process.env.NODE_ENV !== "production" ? {
    configuration: PropTypes.object.isRequired,
    createTransactionDetails: PropTypes.func.isRequired,
    customFunctions: PropTypes.object,
    mode: PropTypes.string,
    longId: PropTypes.string
} : {};

export default ConfigurationManager;