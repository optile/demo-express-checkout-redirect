import _regeneratorRuntime from "babel-runtime/regenerator";

var _this = this;

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

import { createExpressPreset, updateExpressPreset, onCustomerAbort, onProceed, cancelExpressPreset } from "../../../utils/customFunctions";
import get from "lodash/get";
import find from "lodash/find";
import { toRequestData, interactionCodeHandler, handleError } from "../../../utils";
import { storePaypalStatus, storePaypalPaymentID, storePaypalPreset, storePaypalCancelData, storePaypalError } from "./redux";

function getNetworkList(getState) {
    var state = getState();
    return get(state, "list.data", null);
}
function getPaypalList(getState) {
    var list = getNetworkList(getState);
    return find(list, function (element) {
        return element.code === "PAYPAL";
    });
}
function getOperationLink(getState) {
    var paypalList = getPaypalList(getState);
    if (!paypalList) {
        return "";
    }

    return get(paypalList, "links.operation", "");
}
function getUpdateLink(getState) {
    return get(getState(), "paypal.preset.links.self", "");
}
/**
 * On Error
 *
 * @param {Object} params
 * @param {Object} params.err
 * @param {Function} params.dispatch
 * @param {String} params.step
 * @param {Object} params.customFunctions
 */
var onError = function onError(_ref) {
    var err = _ref.err,
        dispatch = _ref.dispatch,
        step = _ref.step,
        customFunctions = _ref.customFunctions;

    var network = "PAYPAL";
    var errorProps = {
        err: err,
        step: step,
        network: network,
        updateState: function updateState() {
            dispatch(storePaypalError(err));
            dispatch(storePaypalStatus("Error"));
        },
        dispatch: dispatch,
        customFunctions: customFunctions
    };
    handleError(errorProps);
};
var handleNotOkResponse = function handleNotOkResponse(_ref2) {
    var result = _ref2.result,
        dispatch = _ref2.dispatch,
        step = _ref2.step,
        customFunctions = _ref2.customFunctions;
    var err = result.error;

    return onError({ err: err, dispatch: dispatch, step: step, customFunctions: customFunctions });
};
var handleCatch = function handleCatch(_ref3) {
    var err = _ref3.err,
        dispatch = _ref3.dispatch,
        step = _ref3.step,
        customFunctions = _ref3.customFunctions;

    var errorMessage = { message: err.message };
    return onError({ err: errorMessage, dispatch: dispatch, step: step, customFunctions: customFunctions });
};
var paymentActionOk = function paymentActionOk(_ref4) {
    var result = _ref4.result,
        dispatch = _ref4.dispatch,
        customFunctions = _ref4.customFunctions;

    var data = result.data;
    var code = data.interaction.code;
    if (code !== "PROCEED") {
        var err = { message: data.resultInfo };
        dispatch(storePaypalError(err));
        dispatch(storePaypalStatus("Error"));
        interactionCodeHandler({ code: code, preset: data, step: "create", dispatch: dispatch, customFunctions: customFunctions });
        return null;
    }
    var providerResponse = get(data, ["providerResponse", "parameters"], false);
    if (providerResponse) {
        var _find = find(providerResponse, ["name", "token"]),
            paymentIdVal = _find.value;

        dispatch(storePaypalPreset(data));
        dispatch(storePaypalPaymentID(paymentIdVal));
        dispatch(storePaypalStatus("Payment Session created"));
        return paymentIdVal;
    }
    throw new Error("Server response does not contain proper data");
};
var paymentAction = function paymentAction(_ref5) {
    var customFunctions = _ref5.customFunctions,
        createTransactionDetails = _ref5.createTransactionDetails;
    return function () {
        var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch, getState) {
            var operationURL, clientId, result;
            return _regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            dispatch(storePaypalStatus("Payment Session Pending"));
                            _context.prev = 1;
                            operationURL = getOperationLink(getState);
                            clientId = get(getState(), "configuration.clientId", null);
                            _context.next = 6;
                            return createExpressPreset({
                                params: { url: operationURL, transaction: createTransactionDetails(null), network: "PAYPAL", clientId: clientId },
                                customFunctions: customFunctions
                            });

                        case 6:
                            result = _context.sent;

                            if (!result.response.ok) {
                                _context.next = 9;
                                break;
                            }

                            return _context.abrupt("return", paymentActionOk({ result: result, dispatch: dispatch, customFunctions: customFunctions }));

                        case 9:
                            return _context.abrupt("return", handleNotOkResponse({ result: result, dispatch: dispatch, step: "create", customFunctions: customFunctions }));

                        case 12:
                            _context.prev = 12;
                            _context.t0 = _context["catch"](1);
                            return _context.abrupt("return", handleCatch({ err: _context.t0, dispatch: dispatch, step: "create", customFunctions: customFunctions }));

                        case 15:
                        case "end":
                            return _context.stop();
                    }
                }
            }, _callee, _this, [[1, 12]]);
        }));

        return function (_x, _x2) {
            return _ref6.apply(this, arguments);
        };
    }();
};
var authorizeActionOk = function authorizeActionOk(_ref7) {
    var result = _ref7.result,
        dispatch = _ref7.dispatch,
        customFunctions = _ref7.customFunctions;
    var data = result.data;
    var _data$interaction = data.interaction,
        code = _data$interaction.code,
        reason = _data$interaction.reason;

    if (code !== "PROCEED") {
        var errorMessage = { message: data.resultInfo };
        dispatch(storePaypalError(errorMessage));
        dispatch(storePaypalStatus("Error"));
        return interactionCodeHandler({ code: code, preset: data, step: "update", dispatch: dispatch, customFunctions: customFunctions });
    }
    var presetReady = reason === "TAKE_ACTION";
    if (presetReady) {
        dispatch(storePaypalPreset(data));
        dispatch(storePaypalStatus("Authorization Done"));
        return onProceed({ params: { preset: data, step: "update", dispatch: dispatch }, customFunctions: customFunctions });
    }
};

var authorizeAction = function authorizeAction(_ref8) {
    var customFunctions = _ref8.customFunctions,
        data = _ref8.data;
    return function () {
        var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch, getState) {
            var updateURL, providerRequest, result;
            return _regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            dispatch(storePaypalStatus("Authorization Pending"));
                            _context2.prev = 1;
                            updateURL = getUpdateLink(getState);
                            providerRequest = toRequestData("PAYPAL", data);

                            if (!updateURL) {
                                _context2.next = 15;
                                break;
                            }

                            _context2.next = 7;
                            return updateExpressPreset({
                                params: { url: updateURL, transaction: { providerRequest: providerRequest }, network: "PAYPAL" },
                                customFunctions: customFunctions
                            });

                        case 7:
                            result = _context2.sent;

                            if (!result.response.ok) {
                                _context2.next = 12;
                                break;
                            }

                            return _context2.abrupt("return", authorizeActionOk({ result: result, dispatch: dispatch, customFunctions: customFunctions }));

                        case 12:
                            return _context2.abrupt("return", handleNotOkResponse({ result: result, dispatch: dispatch, step: "update", customFunctions: customFunctions }));

                        case 13:
                            _context2.next = 16;
                            break;

                        case 15:
                            throw new Error("Update link is not found");

                        case 16:
                            _context2.next = 21;
                            break;

                        case 18:
                            _context2.prev = 18;
                            _context2.t0 = _context2["catch"](1);
                            return _context2.abrupt("return", handleCatch({ err: _context2.t0, dispatch: dispatch, step: "update", customFunctions: customFunctions }));

                        case 21:
                        case "end":
                            return _context2.stop();
                    }
                }
            }, _callee2, _this, [[1, 18]]);
        }));

        return function (_x3, _x4) {
            return _ref9.apply(this, arguments);
        };
    }();
};
var cancelActionOk = function cancelActionOk(_ref10) {
    var result = _ref10.result,
        dispatch = _ref10.dispatch,
        customFunctions = _ref10.customFunctions;
    var data = result.data;
    var _data$interaction2 = data.interaction,
        code = _data$interaction2.code,
        reason = _data$interaction2.reason;

    console.log(code, reason);
    if (code !== "PROCEED") {
        dispatch(storePaypalStatus("Payment Session Cancel Error"));
        return interactionCodeHandler({ code: code, preset: data, step: "cancel", dispatch: dispatch, customFunctions: customFunctions });
    }
    dispatch(storePaypalCancelData(data));
    dispatch(storePaypalStatus("Payment Session Cancelled"));
    return onCustomerAbort({ params: { preset: data, dispatch: dispatch }, customFunctions: customFunctions });
};
var cancelAction = function cancelAction(_ref11) {
    var customFunctions = _ref11.customFunctions,
        data = _ref11.data;
    return function () {
        var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch, getState) {
            var cancelUrl, providerRequest, result;
            return _regeneratorRuntime.wrap(function _callee3$(_context3) {
                while (1) {
                    switch (_context3.prev = _context3.next) {
                        case 0:
                            dispatch(storePaypalStatus("Payment Session Cancel Pending"));
                            _context3.prev = 1;
                            cancelUrl = data.cancelUrl;
                            providerRequest = toRequestData("PAYPAL", data);

                            if (!cancelUrl) {
                                _context3.next = 15;
                                break;
                            }

                            _context3.next = 7;
                            return cancelExpressPreset({
                                params: { url: cancelUrl, transaction: { providerRequest: providerRequest }, network: "PAYPAL" },
                                customFunctions: customFunctions
                            });

                        case 7:
                            result = _context3.sent;

                            if (!result.response.ok) {
                                _context3.next = 12;
                                break;
                            }

                            return _context3.abrupt("return", cancelActionOk({ result: result, dispatch: dispatch, customFunctions: customFunctions }));

                        case 12:
                            return _context3.abrupt("return", handleNotOkResponse({ result: result, dispatch: dispatch, step: "cancel", customFunctions: customFunctions }));

                        case 13:
                            _context3.next = 16;
                            break;

                        case 15:
                            throw new Error("Cancel link is not found");

                        case 16:
                            _context3.next = 21;
                            break;

                        case 18:
                            _context3.prev = 18;
                            _context3.t0 = _context3["catch"](1);
                            return _context3.abrupt("return", handleCatch({ err: _context3.t0, dispatch: dispatch, step: "cancel", customFunctions: customFunctions }));

                        case 21:
                        case "end":
                            return _context3.stop();
                    }
                }
            }, _callee3, _this, [[1, 18]]);
        }));

        return function (_x5, _x6) {
            return _ref12.apply(this, arguments);
        };
    }();
};
export { paymentAction, cancelAction, authorizeAction };