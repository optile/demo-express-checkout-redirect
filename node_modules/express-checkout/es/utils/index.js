import { onAbort, onReload, onRetry, onClientException } from "./customFunctions";
/**
 * Create a map from params
 * @param {Object} data
 * @returns {Object} data
 */
var objectToParams = function objectToParams(data) {
    return Object.entries(data).map(function (_ref) {
        var name = _ref[0],
            value = _ref[1];
        return { name: name, value: value };
    });
};

export var toRequestData = function toRequestData(providerCode, data) {
    return { providerCode: providerCode, parameters: objectToParams(data) };
};
/**
 * Get Redirect Url
 * @param {String} url
 * @param {Object} parameters
 * @return {String} redirect url link
 */
export var getRedirectUrl = function getRedirectUrl(url, parameters) {
    var queryString = parameters.reduce(function (acc, current) {
        return "" + acc + encodeURIComponent(current.name) + "=" + encodeURIComponent(current.value) + "&";
    }, "");
    return "" + url + (url.includes("?") ? "&" : "?") + queryString.slice(0, -1);
};
/**
 * Handle the response
 *
 * @param {Object} params
 * @param {Object} params.code
 * @param {Object} params.preset
 * @param {Object} params.step
 * @param {Object} params.dispatch
 * @param {Object} params.customFunctions
 */
export var interactionCodeHandler = function interactionCodeHandler(_ref2) {
    var code = _ref2.code,
        preset = _ref2.preset,
        step = _ref2.step,
        dispatch = _ref2.dispatch,
        customFunctions = _ref2.customFunctions;

    switch (code) {
        case "ABORT":
            // last payment method used and failed
            onAbort({ params: { preset: preset, step: step, dispatch: dispatch }, customFunctions: customFunctions });
            break;

        case "TRY_OTHER_NETWORK":
            // TODO: don't make hard reload bcz express list is static and won't remove
            // the failed network from the response, so should be handled in front end
            onReload({ params: { preset: preset, step: step, dispatch: dispatch }, customFunctions: customFunctions });
            break;

        case "TRY_OTHER_ACCOUNT":
            // the end customer can retry and will see all network and nothing should change
            onRetry({ params: { preset: preset, step: step, dispatch: dispatch }, customFunctions: customFunctions });
            break;

        case "RETRY":
            //  same as try other account
            onRetry({ params: { preset: preset, step: step, dispatch: dispatch }, customFunctions: customFunctions });
            break;

        case "RELOAD":
            // TODO: make sure to call express list again
            onReload({ params: { preset: preset, step: step, dispatch: dispatch }, customFunctions: customFunctions });
            break;

        default:
            throw new Error("Unknown interaction code: " + code);
    }
};
/**
 * Prepare error object to return
 *
 * @param {Object} err
 * @param {Object} network
 *
 * @return {Object} preset error object in specific structure
 */
export var errorPreset = function errorPreset(err, network) {
    var message = err.message ? err.message : "Payment canceled";
    var preset = {
        resultInfo: message,
        interaction: {
            reason: "CLIENTSIDE_EXCEPTION"
        },
        error: err,
        network: network
    };
    return preset;
};
/**
 * Handle Error
 * Can handle all errors in unified form and gives power to handle the state outside of this scope
 * dispatch is needed for onClientException function customizable by initial props of main component
 *
 * @param {Object} params
 * @param {Object} params.err
 * @param {String} params.step
 * @param {String} params.network could be empty string in case of list request
 * @param {Function} params.dispatch
 * @param {Function} params.updateState
 * @param {Object} params.customFunctions
 */
export var handleError = function handleError(_ref3) {
    var err = _ref3.err,
        step = _ref3.step,
        network = _ref3.network,
        dispatch = _ref3.dispatch,
        updateState = _ref3.updateState,
        customFunctions = _ref3.customFunctions;

    var data = errorPreset(err, network); // create object structure for error
    updateState(); // run some updates for the store in redux
    onClientException({ preset: data, step: step, dispatch: dispatch, customFunctions: customFunctions }); // run customized function to handle the error
};