"use strict";

exports.__esModule = true;
exports.sendDataWithParams = exports.sendData = undefined;

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _queryString = require("query-string");

var _queryString2 = _interopRequireDefault(_queryString);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

/**
 * Fetch Data using fetch and format the response
 * @param {String} url 
 * @param {Object} options 
 * @returns {Promise}
 */
var fetchData = function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee(url, options) {
        var fetchResult, data;
        return _regenerator2.default.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        _context.prev = 0;
                        _context.next = 3;
                        return fetch(url, options);

                    case 3:
                        fetchResult = _context.sent;
                        _context.next = 6;
                        return handleResponse(fetchResult);

                    case 6:
                        data = _context.sent;
                        return _context.abrupt("return", {
                            response: {
                                ok: true
                            },
                            data: data
                        });

                    case 10:
                        _context.prev = 10;
                        _context.t0 = _context["catch"](0);
                        return _context.abrupt("return", {
                            response: {
                                ok: false
                            },
                            error: {
                                message: _context.t0.message,
                                status: _context.t0.status,
                                statusText: _context.t0.statusText
                            }
                        });

                    case 13:
                    case "end":
                        return _context.stop();
                }
            }
        }, _callee, undefined, [[0, 10]]);
    }));

    return function fetchData(_x, _x2) {
        return _ref.apply(this, arguments);
    };
}();
/**
 * Handle JSON Response
 * @param {Object} response 
 * @returns {Promise.reject} includes message as json
 */
function handleJSONResponse(response) {
    return response.json().then(function (json) {
        if (response.ok) {
            return json;
        }
        return Promise.reject({
            message: json,
            status: response.status,
            statusText: response.statusText
        });
    });
}
/**
 * Handle Text Response
 * @param {Object} response 
 * @returns {Promise.reject} includes message as text
 */
function handleTextResponse(response) {
    return response.text().then(function (text) {
        if (response.ok) {
            return text;
        }
        return Promise.reject({
            message: text,
            status: response.status,
            statusText: response.statusText
        });
    });
}
/**
 * Handle Response
 * @param {Object} response 
 * @returns {Promise.reject} includes message by type OR {Error}
 */
function handleResponse(response) {
    var contentType = response.headers.get("content-type");
    if (contentType && contentType.includes("application/json")) {
        return handleJSONResponse(response);
    }
    if (contentType && contentType.includes("text/plain") || contentType.includes("text/html")) {
        return handleTextResponse(response);
    }
    throw new Error("Sorry, content-type " + contentType + " not supported");
}

/**
 * Send Data
 * @param {Object} params
 * @param {String} params.url
 * @param {String} params.method
 * @param {Object} params.body
 * @returns {Promise} 
 */
var sendData = exports.sendData = function sendData(_ref2) {
    var url = _ref2.url,
        method = _ref2.method,
        body = _ref2.body;
    return fetchData(url, {
        method: method,
        mode: "cors",
        cache: "default",
        redirect: "follow",
        headers: {
            "Content-Type": "application/json",
            Accept: "application/json"
        },
        body: body ? JSON.stringify(body) : null
    });
};
/**
 * Send Data With Params
 * pass querystring to url for fetch
 * @param {Object} params
 * @param {String} params.baseURL
 * @param {String} params.method    
 * @param {Object} params.params
 * @param {Object} params.body
 * @returns {Promise} 
 */
var sendDataWithParams = exports.sendDataWithParams = function sendDataWithParams(_ref3) {
    var baseURL = _ref3.baseURL,
        method = _ref3.method,
        params = _ref3.params,
        body = _ref3.body;

    var _queryString$parseUrl = _queryString2.default.parseUrl(baseURL),
        url = _queryString$parseUrl.url,
        query = _queryString$parseUrl.query;

    var newQueryString = _queryString2.default.stringify(_extends({}, query, params));
    var newURL = newQueryString ? url + "?" + newQueryString : url;
    return fetchData(newURL, {
        method: method,
        mode: "cors",
        cache: "default",
        redirect: "follow",
        headers: {
            "Content-Type": "application/json",
            Accept: "application/json"
        },
        body: body ? JSON.stringify(body) : null
    });
};