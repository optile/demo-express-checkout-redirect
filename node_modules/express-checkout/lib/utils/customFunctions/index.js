"use strict";

exports.__esModule = true;
exports.onCustomerAbort = exports.onClientException = exports.getExpressPresetAccount = exports.onRetry = exports.onReload = exports.onAbort = exports.onProceed = exports.confirmExpressPreset = exports.cancelExpressPreset = exports.updateExpressPreset = exports.createExpressPreset = exports.getExpressList = exports.useCorrectFunction = undefined;

var _get = require("lodash/get");

var _get2 = _interopRequireDefault(_get);

var _network = require("../network");

var _index = require("../index");

var _redux = require("../../components/GlobalError/redux");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Internal implementation for getExpressList function
 * called to get list of applicable payment methods, it is first step in mode==null (first page)
 * That can be overwritten in customFunctions.getExpressList
 * @param {Object} params
 * @param {String} params.url
 * @param {String} params.clientId
 * @param {String} params.country
 */
var getExpressListInternal = function getExpressListInternal(_ref) {
    var url = _ref.url,
        clientId = _ref.clientId,
        country = _ref.country;
    return (0, _network.sendDataWithParams)({ baseURL: url, method: "GET", params: { clientId: clientId, country: country } });
};

/**
 * Internal implementation for createExpressPreset function
 * called to create payment session, for example in PAYPAL it is passed under payment for loading Paypal button in mode==null (first page)
 * That can be overwritten in customFunctions.createExpressPreset
 * @param {Object} params
 * @param {String} params.url
 * @param {Object} params.transaction result of createTransactionDetails function, mandatory prop for ExpressCheckout
 * @param {String} params.network payment code, for example: "PAYPAL"
 * @param {String} params.clientId
 */
var createExpressPresetInternal = function createExpressPresetInternal(_ref2) {
    var url = _ref2.url,
        transaction = _ref2.transaction,
        network = _ref2.network,
        clientId = _ref2.clientId;
    return (0, _network.sendDataWithParams)({ baseURL: url, method: "POST", params: { clientId: clientId }, body: transaction });
};

/**
 * Internal implementation for updateExpressPreset function
 * called to update payment session, for example in PAYPAL it is passed under onAuthorize for loading Paypal button in mode==null (first page)
 * That can be overwritten in customFunctions.updateExpressPreset
 * @param {Object} params
 * @param {String} params.url
 * @param {Object} params.transaction providerRequest
 * @param {String} params.network payment code, for example: "PAYPAL"
 */
var updateExpressPresetInternal = function updateExpressPresetInternal(_ref3) {
    var url = _ref3.url,
        transaction = _ref3.transaction,
        network = _ref3.network;
    return (0, _network.sendData)({ url: url, method: "PUT", body: transaction });
};

/**
 * Internal implementation for cancelExpressPreset function
 * called to cancel payment session, for example in PAYPAL, when the end customer click on cancel link
 * it is passed under onCancel for loading Paypal button in mode==null (first page)
 * That can be overwritten in customFunctions.cancelExpressPreset
 * @param {Object} params
 * @param {String} params.url
 * @param {Object} params.transaction providerRequest
 * @param {String} params.network payment code, for example: "PAYPAL"
 */
var cancelExpressPresetInternal = function cancelExpressPresetInternal(_ref4) {
    var url = _ref4.url,
        transaction = _ref4.transaction,
        network = _ref4.network;
    return (0, _network.sendData)({ url: url, method: "POST", body: {} });
};

/**
 * Internal implementation for getExpressPresetAccount function
 * called to get the preset account, first step in mode==Summary (second page)
 * That can be overwritten in customFunctions.getExpressPresetAccount
 * @param {Object} params
 * @param {String} params.url
 */
var getExpressPresetAccountInternal = function getExpressPresetAccountInternal(_ref5) {
    var url = _ref5.url;
    return (0, _network.sendDataWithParams)({ baseURL: url, method: "GET", params: {} });
};

/**
 * Internal implementation for confirmExpressPreset function
 * called to confirm preset account, for example in PAYPAL, when the end customer sees the information about the payment and click a button to confirm
 * it is used in onClick of Confirm button in mode==Summary (second page)
 * That can be overwritten in customFunctions.confirmExpressPreset
 * @param {Object} params
 * @param {String} params.url
 * @param {String} params.network payment code, for example: "PAYPAL"
 */
var confirmExpressPresetInternal = function confirmExpressPresetInternal(_ref6) {
    var url = _ref6.url,
        network = _ref6.network;
    return (0, _network.sendData)({ url: url, method: "POST", body: {} });
};

/**
 * Internal implementation for onProceed function
 * called when the http request returns data.interaction.code === "PROCEED"
 * That can be overwritten in customFunctions.onProceed
 * @param {Object} params
 * @param {Object} params.preset
 * @param {String} params.step it indicates the current step for example Update, so the proceed function will know that we need to load confirm/summary mode
 * @param {Function} params.dispatch the dispatch function used in redux to modify the store, the actions structures should be known
 */
var onProceedInternal = function onProceedInternal(_ref7) {
    var preset = _ref7.preset,
        step = _ref7.step,
        dispatch = _ref7.dispatch;

    if (!preset.redirect) {
        console.log("Redirect information is not found in Preset response");
        return;
    }
    var _preset$redirect = preset.redirect,
        url = _preset$redirect.url,
        method = _preset$redirect.method,
        parameters = _preset$redirect.parameters;

    if (method === "GET") {
        window.location.assign((0, _index.getRedirectUrl)(url, parameters));
        return;
    }
    console.log("Redirect via " + method + " is not supported");
    return;
};

/**
 * Internal implementation for onAbort function
 * called when the http request returns data.interaction.code === "ABORT"
 * for example when last payment method is used and failed
 * That can be overwritten in customFunctions.onAbort
 * @param {Object} params
 * @param {Object} params.preset
 * @param {String} params.step it indicates the current step for example Update
 * @param {Function} params.dispatch the dispatch function used in redux to modify the store, the actions structures should be known
 */
var onAbortInternal = function onAbortInternal(_ref8) {
    var preset = _ref8.preset,
        step = _ref8.step,
        dispatch = _ref8.dispatch;
    var resultInfo = preset.resultInfo;

    console.log("Error has occurred: ", resultInfo, ", ", "Step: ", step);
    if (!preset.redirect) {
        console.log("Redirect information is not found in Preset response");
        // TODO Logout Amazon pay
        return;
    }
    var _preset$redirect2 = preset.redirect,
        url = _preset$redirect2.url,
        method = _preset$redirect2.method,
        parameters = _preset$redirect2.parameters;

    if (method === "GET") {
        window.location.assign((0, _index.getRedirectUrl)(url, parameters));
    } else {
        console.log("Redirect via " + method + " is not supported");
    }
};

/**
 * Internal implementation for onReload function
 * called when the http request returns data.interaction.code === "TRY_OTHER_NETWORK" || data.interaction.code === "RELOAD"
 * That can be overwritten in customFunctions.onReload
 * @param {Object} params
 * @param {Object} params.preset
 * @param {String} params.step it indicates the current step for example Update
 * @param {Function} params.dispatch the dispatch function used in redux to modify the store, the actions structures should be known
 */
var onReloadInternal = function onReloadInternal(_ref9) {
    var preset = _ref9.preset,
        step = _ref9.step,
        dispatch = _ref9.dispatch;
    var resultInfo = preset.resultInfo;

    console.log("Error has occurred: ", resultInfo, ", ", "Step: ", step);
    // TODO Logout Amazon pay
};

/**
 * Internal implementation for onRetry function
 * called when the http request returns data.interaction.code === "RETRY" || data.interaction.code === "TRY_OTHER_ACCOUNT"
 * the end customer can retry and will see all network and nothing should change
 * That can be overwritten in customFunctions.onRetry
 * @param {Object} params
 * @param {Object} params.preset
 * @param {String} params.step it indicates the current step for example Update
 * @param {Function} params.dispatch the dispatch function used in redux to modify the store, the actions structures should be known
 */
var onRetryInternal = function onRetryInternal(_ref10) {
    var preset = _ref10.preset,
        step = _ref10.step,
        dispatch = _ref10.dispatch;
    var resultInfo = preset.resultInfo;

    console.log("Error has occurred: ", resultInfo, ", ", "Step: ", step);
    // TODO Logout Amazon pay
};

/**
 * Internal implementation for onCustomerAbort function
 * It is called when the end user click on cancel, for example in Paypal popup
 * That can be overwritten in customFunctions.onCustomerAbort
 * @param {Object} params
 * @param {Object} params.preset
 * @param {String} params.step it indicates the current step for example Update
 * @param {Function} params.dispatch the dispatch function used in redux to modify the store, the actions structures should be known
 */
var onCustomerAbortInternal = function onCustomerAbortInternal(_ref11) {
    var preset = _ref11.preset,
        step = _ref11.step,
        dispatch = _ref11.dispatch;

    if (!preset.redirect) {
        console.log("Redirect information is not found in Preset response");
        return;
    }
    var _preset$redirect3 = preset.redirect,
        url = _preset$redirect3.url,
        method = _preset$redirect3.method,
        parameters = _preset$redirect3.parameters;

    if (method === "GET") {
        window.location.assign((0, _index.getRedirectUrl)(url, parameters));
        return;
    }
    console.log("Redirect via " + method + " is not supported");
};

/**
 * Object that contains all the initial definition
 * of the function that can be customized using customFunctions
 */
var internalFunctions = {
    getExpressList: getExpressListInternal,
    createExpressPreset: createExpressPresetInternal,
    updateExpressPreset: updateExpressPresetInternal,
    cancelExpressPreset: cancelExpressPresetInternal,
    getExpressPresetAccount: getExpressPresetAccountInternal,
    confirmExpressPreset: confirmExpressPresetInternal,
    onProceed: onProceedInternal,
    onAbort: onAbortInternal,
    onReload: onReloadInternal,
    onRetry: onRetryInternal,
    onCustomerAbort: onCustomerAbortInternal
};

/**
 * Use Correct Function depending on if it is initialized in customFunctions or just use initialFunctions
 * @param {Object} params
 * @param {Object} params.params
 * @param {String} params.functionName the key name of the function to check is defined as customFunctions
 * @param {Object} params.customFunctions
 * @returns {Function} Correct function
 */
var useCorrectFunction = exports.useCorrectFunction = function useCorrectFunction(_ref12) {
    var params = _ref12.params,
        functionName = _ref12.functionName,
        customFunctions = _ref12.customFunctions;

    var customFunction = (0, _get2.default)(customFunctions, functionName, false);
    var internalFunction = (0, _get2.default)(internalFunctions, functionName, false);
    return customFunction ? customFunction(params) : internalFunction(params);
};

/**
 * Get Express List
 * @param {Object} params
 * @param {Object} params.params the parameters passed to getExpressList from custom Functions or initial functions
 * @param {Object} params.customFunctions
 */
var getExpressList = exports.getExpressList = function getExpressList(_ref13) {
    var params = _ref13.params,
        customFunctions = _ref13.customFunctions;
    return useCorrectFunction({ params: params, functionName: "getExpressList", customFunctions: customFunctions });
};

/**
 * Create Express Preset
 * @param {Object} params
 * @param {Object} params.params the parameters passed to createExpressPreset from custom Functions or initial functions
 * @param {Object} params.customFunctions
 */
var createExpressPreset = exports.createExpressPreset = function createExpressPreset(_ref14) {
    var params = _ref14.params,
        customFunctions = _ref14.customFunctions;
    return useCorrectFunction({ params: params, functionName: "createExpressPreset", customFunctions: customFunctions });
};

/**
 * Update Express Preset
 * @param {Object} params
 * @param {Object} params.params the parameters passed to updateExpressPreset from custom Functions or initial functions
 * @param {Object} params.customFunctions
 */
var updateExpressPreset = exports.updateExpressPreset = function updateExpressPreset(_ref15) {
    var params = _ref15.params,
        customFunctions = _ref15.customFunctions;
    return useCorrectFunction({ params: params, functionName: "updateExpressPreset", customFunctions: customFunctions });
};

/**
 * Cancel Express Preset
 * @param {Object} params
 * @param {Object} params.params the parameters passed to updateExpressPreset from custom Functions or initial functions
 * @param {Object} params.customFunctions
 */
var cancelExpressPreset = exports.cancelExpressPreset = function cancelExpressPreset(_ref16) {
    var params = _ref16.params,
        customFunctions = _ref16.customFunctions;
    return useCorrectFunction({ params: params, functionName: "cancelExpressPreset", customFunctions: customFunctions });
};

/**
 * Confirm Express Preset
 * @param {Object} params
 * @param {Object} params.params the parameters passed to confirmExpressPreset from custom Functions or initial functions
 * @param {Object} params.customFunctions
 */
var confirmExpressPreset = exports.confirmExpressPreset = function confirmExpressPreset(_ref17) {
    var params = _ref17.params,
        customFunctions = _ref17.customFunctions;
    return useCorrectFunction({ params: params, functionName: "confirmExpressPreset", customFunctions: customFunctions });
};

/**
 * On Proceed
 * @param {Object} params
 * @param {Object} params.params the parameters passed to onProceed from custom Functions or initial functions
 * @param {Object} params.customFunctions
 */
var onProceed = exports.onProceed = function onProceed(_ref18) {
    var params = _ref18.params,
        customFunctions = _ref18.customFunctions;
    return useCorrectFunction({ params: params, functionName: "onProceed", customFunctions: customFunctions });
};

/**
 * On Abort
 * @param {Object} params
 * @param {Object} params.params the parameters passed to onAbort from custom Functions or initial functions
 * @param {Object} params.customFunctions
 */
var onAbort = exports.onAbort = function onAbort(_ref19) {
    var params = _ref19.params,
        customFunctions = _ref19.customFunctions;
    return useCorrectFunction({ params: params, functionName: "onAbort", customFunctions: customFunctions });
};

/**
 * On Reload
 * @param {Object} params
 * @param {Object} params.params the parameters passed to onReload from custom Functions or initial functions
 * @param {Object} params.customFunctions
 */
var onReload = exports.onReload = function onReload(_ref20) {
    var params = _ref20.params,
        customFunctions = _ref20.customFunctions;
    return useCorrectFunction({ params: params, functionName: "onReload", customFunctions: customFunctions });
};

/**
 * On Retry
 * @param {Object} params
 * @param {Object} params.params the parameters passed to onRetry from custom Functions or initial functions
 * @param {Object} params.customFunctions
 */
var onRetry = exports.onRetry = function onRetry(_ref21) {
    var params = _ref21.params,
        customFunctions = _ref21.customFunctions;
    return useCorrectFunction({ params: params, functionName: "onRetry", customFunctions: customFunctions });
};

/**
 * Get Express Preset Account
 * @param {Object} params
 * @param {Object} params.params the parameters passed to onRetry from custom Functions or initial functions
 * @param {Object} params.customFunctions
 */
var getExpressPresetAccount = exports.getExpressPresetAccount = function getExpressPresetAccount(_ref22) {
    var params = _ref22.params,
        customFunctions = _ref22.customFunctions;
    return useCorrectFunction({ params: params, functionName: "getExpressPresetAccount", customFunctions: customFunctions });
};

/**
 * On Client Exception
 * @param {Object} params
 * @param {Object} params.params the parameters passed to onClientException from custom Functions or initial functions
 * @param {Object} params.customFunctions
 */
var onClientException = exports.onClientException = function onClientException(_ref23) {
    var preset = _ref23.preset,
        step = _ref23.step,
        dispatch = _ref23.dispatch,
        customFunctions = _ref23.customFunctions;

    var onClientExceptionClient = (0, _get2.default)(customFunctions, "onClientException", false);
    var onErrorClient = (0, _get2.default)(customFunctions, "onError", false);
    if (onClientExceptionClient) {
        onClientExceptionClient({ preset: preset, step: step, dispatch: dispatch });
        return;
    }
    if (onErrorClient) {
        onErrorClient({ resultInfo: preset.resultInfo, network: preset.network, step: step, dispatch: dispatch });
        return;
    }
    var resultInfo = preset.resultInfo;

    var message = "Error has occurred: " + resultInfo + ",  Step: " + step;
    dispatch((0, _redux.storeGlobalError)(message));
    dispatch((0, _redux.storeDisplayGlobalError)(true));
    console.log(message);
    // TODO Logout Amazon pay using dispatch if needed
};

/**
 * On Customer Abort
 * @param {Object} params
 * @param {Object} params.params the parameters passed to onCustomerAbort from custom Functions or initial functions
 * @param {Object} params.customFunctions
 */
var onCustomerAbort = exports.onCustomerAbort = function onCustomerAbort(_ref24) {
    var params = _ref24.params,
        customFunctions = _ref24.customFunctions;
    return useCorrectFunction({ params: params, functionName: "onCustomerAbort", customFunctions: customFunctions });
};