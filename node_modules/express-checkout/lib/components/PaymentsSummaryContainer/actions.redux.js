"use strict";

exports.__esModule = true;
exports.confirmAction = undefined;

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _customFunctions = require("../../utils/customFunctions");

var _get = require("lodash/get");

var _get2 = _interopRequireDefault(_get);

var _utils = require("../../utils");

var _redux = require("./redux");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

/**
 * On Error
 *
 * @param {Object} params
 * @param {Object} params.err
 * @param {Function} params.dispatch
 * @param {String} params.step
 * @param {Object} params.customFunctions
 */
var onError = function onError(_ref) {
    var err = _ref.err,
        dispatch = _ref.dispatch,
        step = _ref.step,
        customFunctions = _ref.customFunctions;

    var network = "PAYPAL";
    var errorProps = {
        err: err,
        step: step,
        network: network,
        updateState: function updateState() {
            dispatch((0, _redux.setConfirmAccountError)(err));
            dispatch((0, _redux.setConfirmAccountLoading)(false));
        },
        dispatch: dispatch,
        customFunctions: customFunctions
    };
    (0, _utils.handleError)(errorProps);
};
var handleNotOkResponse = function handleNotOkResponse(_ref2) {
    var result = _ref2.result,
        dispatch = _ref2.dispatch,
        step = _ref2.step,
        customFunctions = _ref2.customFunctions;
    var err = result.error;

    return onError({ err: err, dispatch: dispatch, step: step, customFunctions: customFunctions });
};
var handleCatch = function handleCatch(_ref3) {
    var err = _ref3.err,
        dispatch = _ref3.dispatch,
        step = _ref3.step,
        customFunctions = _ref3.customFunctions;

    var errorMessage = { message: err.message };
    return onError({ err: errorMessage, dispatch: dispatch, step: step, customFunctions: customFunctions });
};
var confirmActionOk = function confirmActionOk(_ref4) {
    var result = _ref4.result,
        dispatch = _ref4.dispatch,
        customFunctions = _ref4.customFunctions;
    var data = result.data;
    // checking interaction codes

    var code = data.interaction.code;

    if (code !== "PROCEED") {
        var err = { message: data.resultInfo };
        dispatch((0, _redux.setConfirmAccountError)(err));
        dispatch((0, _redux.setConfirmAccountLoading)(false));
        (0, _utils.interactionCodeHandler)({ code: code, preset: data, step: "confirm", dispatch: dispatch, customFunctions: customFunctions });
        return;
    }
    dispatch((0, _redux.storeConfirmAccount)(data));
    return (0, _customFunctions.onProceed)({ params: { preset: data, step: "confirm", dispatch: dispatch }, customFunctions: customFunctions });
};
var confirmAction = function confirmAction(_ref5) {
    var customFunctions = _ref5.customFunctions;
    return function () {
        var _ref6 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee(dispatch, getState) {
            var confirmURL, network, result;
            return _regenerator2.default.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            dispatch((0, _redux.setConfirmAccountLoading)(true));
                            _context.prev = 1;
                            confirmURL = (0, _get2.default)(getState(), "presetAccount.data.links.confirm", "");
                            network = (0, _get2.default)(getState(), "presetAccount.data.network", null);
                            _context.next = 6;
                            return (0, _customFunctions.confirmExpressPreset)({
                                params: { url: confirmURL, network: network },
                                customFunctions: customFunctions
                            });

                        case 6:
                            result = _context.sent;

                            if (!result.response.ok) {
                                _context.next = 9;
                                break;
                            }

                            return _context.abrupt("return", confirmActionOk({ result: result, dispatch: dispatch, customFunctions: customFunctions }));

                        case 9:
                            return _context.abrupt("return", handleNotOkResponse({ result: result, dispatch: dispatch, step: "confirm", customFunctions: customFunctions }));

                        case 12:
                            _context.prev = 12;
                            _context.t0 = _context["catch"](1);
                            return _context.abrupt("return", handleCatch({ err: _context.t0, dispatch: dispatch, step: "confirm", customFunctions: customFunctions }));

                        case 15:
                        case "end":
                            return _context.stop();
                    }
                }
            }, _callee, undefined, [[1, 12]]);
        }));

        return function (_x, _x2) {
            return _ref6.apply(this, arguments);
        };
    }();
};
exports.confirmAction = confirmAction;